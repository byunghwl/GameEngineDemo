// 2014. 05
// 
// 충돌체크 함수 모음
//
//
//

#pragma once

#define   POSITION D3DXVECTOR3
#define   VECTOR3  D3DXVECTOR3
//////////////////////////////////////////////////////////////////////////
//
// 충돌체크후 반환값이 ★선분 타입★일때를 위한 정의
enum LINE_TYPE
{
	LT_NONE,
	LT_LEFT,
	LT_RIGHT,
	LT_TOP,
	LT_BOTTOM
};


//////////////////////////////////////////////////////////////////////////
//
// 삼각형과 충돌체크후 반환값이 ★선분 타입★일때를 위한 정의
enum LINE_TYPE_TRI
{
	LTT_NONE,
	LTT_TOP,
	LTT_LEFT,
	LTT_RIGHT
	
};
typedef struct DIST_NUM
{
	float Dist; // 점과 직선의 거리를 잠시 저장할 변수
	int num; // 선분번호를 저장할 변수

}DIST_NUM;


/***********************************************************************
						struct	SH_CollideInfo

					 충돌했을때의 충돌관련 정보를 넘겨주기 위한 
						구조체  [2014.11.10 ]
************************************************************************/
struct SH_CollideInfo
{
	float						Velo; // 속도
	D3DXVECTOR3					Direction;//방향벡터
	bool						X,Z; //충돌했을때 사각형에 부딪힌 축 ??  [2014.11.25 ]

	SH_CollideInfo(){Velo = 0.0f; Direction = D3DXVECTOR3(0.0f, 0.0f, 0.0f);}
};

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터 ...함수정의
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////
// 직선과 점의 거리 구하기
//
// 리턴값 : 점과 직선의 최단거리 2D 용!!!!!!!!!!!!!!!!!!★★★
// _p : 점
// _Norm : ax + bx + c = 0 직선의 방정식에서 (a,b)에 해당하는 값( 2차원이므로 z값은 0.0f) ,, 선분의 법선벡터임
// Spos : 벡터의 시작점

float CalDist_Vert_Line(POSITION _p , VECTOR3 _Norm , POSITION _Spos );



//////////////////////////////////////////////////////////////////////////
// 반사벡터 구하는 함수
// _DirIn : 입사 벡터
// _Norm  : 반사할곳의 노말벡터
//
VECTOR3 Cal_Reflect_Vec(VECTOR3 _DirIn, VECTOR3 _Norm);


//////////////////////////////////////////////////////////////////////////
// 점이 벡터의 왼쪽에 있는지 판별하는 함수 2D 용!!!!!!!!!!!!!!!!!!★★★
// _S : 벡터의 시작점
// _V : 벡터
// _p : 임의의 점

bool IsLeft_Vert_Vec( POSITION _S, D3DXVECTOR3 _V1, POSITION _p );

//////////////////////////////////////////////////////////////////////////
// 점이 벡터의 왼쪽에 있는지 판별하는 함수 2D 용!!!!!!!!!!!!!!!!!!★★★
// _S : 벡터의 시작점
// _V : 벡터1
//_V2 : 벡터2

bool IsLeft_Vec_Vec(  D3DXVECTOR3 _V1, D3DXVECTOR3 _V2 );

//////////////////////////////////////////////////////////////////////////
// 벡터가 기준 벡터의 왼쪽에 있는지 판별하는 함수
// _V1: 기준벡터(x축)
// _v2: 왼쪽인지오른쪽인지 판별할 벡터(z축) ★★★★ 3D 용!!!!!!!!!!!!!!!!!!★★★

bool IsLeft_Vec_Vec_3D(  D3DXVECTOR3 _V1, D3DXVECTOR3 _V2 );
//-----------------------------------------------------------------------------
// 3D상에서 구와 직선의 충돌
//-----------------------------------------------------------------------------

bool Collision_Sphere_Line(const D3DXVECTOR3& _SphereCenter,
							const float& _Raius,
							const D3DXVECTOR3& _LineBegine, 
							const D3DXVECTOR3& _LineDirection );


//-------------------------------------------------------------------------
// Arg	  : const D3DXVECTOR3& Sp1_Center , const float& Sp1_Rad  //원1의 중점과 반지름
//			const D3DXVECTOR3& Sp2_Center , const float& Sp2_Rad  // 원2의 중점과 반지름
// Return :
// Desc   : 3D상의 두 구를 충돌테스트 하는 함수[2014.11.11 ]
//-------------------------------------------------------------------------
bool CollCheck_Sphere_vs_Shpere(const D3DXVECTOR3& Sp1_Center , const float& Sp1_Rad , const D3DXVECTOR3& Sp2_Center , const float& Sp2_Rad  );


//-------------------------------------------------------------------------
// Arg	  : const D3DXVECTOR3& Sp1_Center , const float& Sp1_Rad  //원1의 중점과 반지름
//			const D3DXVECTOR3& Box_Center ,  const D3DXVECTOR3& Box_Max, const D3DXVECTOR3& Box_Min //aabb 박스의  중점, 최대점, 죄소점
// Return : bool 
// Desc   : 3D상의 구와 aabb박스를 충돌테스트 하는 함수   [2014.11.11 ]
//-------------------------------------------------------------------------
bool CollCheck_Sphere_vs_BoxAABB(const D3DXVECTOR3& Sp1_Center , const float& Sp1_Rad ,
								 const D3DXVECTOR3& Box_Center , const D3DXVECTOR3& Box_Max, const D3DXVECTOR3& Box_Min );