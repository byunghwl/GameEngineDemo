/************************************************************************/
/*							[2014.7.24 배성환]                       */
//							   Missile.cpp
//					
/************************************************************************/

#include "DXUT.h"
#include "GameObject.h"
#include "Missile.h"


//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//클래스 내의 static변수 초기화
ASEMesh* cMissile::m_pMesh = nullptr;
int		 cMissile::m_MisslieCnt = 0;

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////




//-----------------------------------------------------------------------------
// 미사일 데이타 구조체
//-----------------------------------------------------------------------------  
Missile_DATA::Missile_DATA()
{
	Size	 = 0;
	Dist_to_Smoke = 0.0f;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터 cMissile 클래스 맴버 함수 정의 [2014.7.24 배성환]
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////



//-----------------------------------------------------------------------------
// 생성자 소멸자
//-----------------------------------------------------------------------------
cMissile::cMissile() : m_pAirCraft(nullptr)
{	
	m_MisslieCnt++;

	if(m_pMesh == nullptr)
	{
		m_pMesh = new ASEMesh(); //처음한번만(static 멤버임) 메쉬데이타 동적생성 [2014.7.24 배성환]
		ASSERT_IF_FAIL_MemAlloc(m_pMesh)
	}
	m_BezPercent = 0.0f;
}

cMissile::cMissile( LPDIRECT3DDEVICE9 _Device, Missile_DATA* pMData/* = nullptr*/, Bullet_DATA* pBData/* = nullptr */)
{
	Init(pMData, pBData,  _Device);
}

cMissile::~cMissile()
{
	Release();
}

//-----------------------------------------------------------------------------
// 메모리 해제 함수
//-----------------------------------------------------------------------------
void cMissile::Release()
{//데이터 제거...
	cBullet::Release();
	m_MisslieCnt--;

	if(m_MisslieCnt <= 1)
	{	SAFE_DELETE(m_pMesh) //가장 마지막에 삭제되는 Missile객체는 m_pMesh를 반드시 메모리해제 해줘야한다.  [2014.7.25 배성환]

		LOG_WRITE("소멸자 호출 : ~cMissile() , m_pMesh->SAFE_DELETE");
	}
	//m_pAirCraft : 이거는 빌려온거라 해제 안해도 됨,다른곳에서 해제됨
	
}


//-----------------------------------------------------------------------------
// 미사일 업데이트 함수 [2014.7.25 배성환]
//-----------------------------------------------------------------------------
int cMissile::Update(float timeDelta)
{ 


	if(m_IsFire == false)//발사안됬으면 비행기날개에 부착되어있어야 함
	{
		if(m_MData.is_right == true) //오른쪽날개에 붙어있다면 [2014.7.26 배성환]
		{
			m_WorldTM = m_pAirCraft->m_pHFirePos_R->getWorldTM(); //비행기 오른쪽날개에있는 헬퍼오브젝트에서 월드TM을 가져온다.
			m_pMesh->Update(timeDelta, m_WorldTM);

			m_LookVec  = m_WorldTM.m[2];
			m_RightVec = m_WorldTM.m[0];
			m_UpVec    = m_WorldTM.m[1];
			m_Pos	   = m_WorldTM.m[3];
		
		}
		
	}
	else // 발사되었다면 [2014.7.26 배성환]
	{
		
		if(m_BData.lifetime > 0.0f) 
		{								   // 발사된 직후에는 라이프타임이 줄어든다. 
			m_BData.lifetime -= timeDelta; //4초뒤에 다시 비행기로 돌아오게하기위해  [2014.7.26 배성환]

			m_BezPercent += timeDelta*0.5f;
			if(m_BezPercent >1.0f)
			{
				m_BData.lifetime = -1.0f;
			}

			D3DXVECTOR3 frontPos = SHUtil::BezierCurb(m_BezierPoint, 3, m_BezPercent+0.1f );
			m_Pos = SHUtil::BezierCurb(m_BezierPoint, 3, m_BezPercent );

			m_LookVec = frontPos - m_Pos; //미사일을 앞으로 향할 방향으로 회전시키기 위한 코드 [2014.7.28 배성환]

			//m_Pos += m_LookVec * m_BData.Velo * timeDelta;
			Cal_WorldTM();   //m_LookVec ,rightvec, Upvec, m_Pos 를 이용해 월드TM을 만들어 준다. 

			//발사되었으면 연기를 분사한다. [2014.7.26 배성환]

			m_Smoke.SetOrigne(m_Pos + (m_LookVec * -m_MData.Dist_to_Smoke));//계속 생성위치 업데이트 시켜주기[2014.7.24 배성환]
			m_Smoke.Set_EmissDir(-m_LookVec);
			m_Smoke.update(timeDelta);
		}
		else 
		{  
			m_IsFire = false;      //다시 발사안한걸로 설정해주기 [2014.7.26 배성환]
			m_BData.lifetime = m_BDbk.lifetime;   
			m_pAirCraft->m_AData.MissileCnt = m_pAirCraft->m_ADatabk.MissileCnt ; //비행기 미사일개수 초기화
			m_Smoke.SetOrigne((m_pAirCraft->m_pHFirePos_R->getWorldTM()).m[3]);
			m_Smoke.Reset_All(); //모든 파티클을 돌며 속성을 초기화 한다. [2014.7.27 배성환]
			m_BezPercent = 0;
		}
		

		
	}

	//메쉬데이타 업데이트 해주기 [2014.7.26 배성환]
	m_pMesh->Update(timeDelta, m_WorldTM);
	return 1;
}


//-----------------------------------------------------------------------------
// 미사일 그려주기[2014.7.26 배성환]
//-----------------------------------------------------------------------------
int cMissile::Draw(float dTime, float alpha/* = 1.0f*/)
{ 
	m_pMesh->Draw(m_pDevice); //ase mesh 그리기
	if(m_IsFire )
	{
		m_Smoke.render(); // 발사되었을때만 연기 그리기  [2014.7.27 배성환]
	}
	
	return TRUE;
}


//-----------------------------------------------------------------------------
// 미사일 초기화 함수 [2014.7.26 배성환]
//-----------------------------------------------------------------------------
int	cMissile::Init(  Missile_DATA* pMD , Bullet_DATA* pBD, LPDIRECT3DDEVICE9 _Device)
{
	if(FAILED(cBullet::Init(pBD, _Device)))		//
	{
		return FALSE;
	}
	
	if(pMD)
	{
		//추가 데이터 셋팅.. 
		m_MData = *pMD;   //데이터 복사  [2014.7.26 배성환]
		
	}

	m_pAirCraft = &G_AirCraft;// G_AirCraft 포인터만 저장해놓기 [2014.7.26 배성환]
	
	//////////////////////////////////////////////////////////////////////////
	// 미사일 메쉬를 반드시 초기화 할때 생성해 줘야 한다. ★ [2014.7.26 배성환]

	if(m_pMesh ==NULL) {write_log_file("미사일 메쉬 생성 실패, m_pMesh가 NULL 입니다.");  return 0;}
		m_pMesh->createMesh(m_pDevice); //메쉬생성해주기


	//////////////////////////////////////////////////////////////////////////
	// 여기서 부터 미사일 중점과 연기분사위치까지의 거리를 구하기 위한 코드 [2014.7.26 배성환]
	if(m_pMesh != nullptr)
	{
		const HELPEROBJECT *pH;
		D3DXVECTOR3   tempPos;  // 헬퍼오브젝트의 포지션을 저장할 임시변수
		pH = m_pMesh->Get_HelperObject("Helper_Smoke_Pos");

		if(pH != nullptr)
		{	
			tempPos = pH->NodeTM.Pos;
			m_MData.Dist_to_Smoke = D3DXVec3Length(&tempPos); //거리 구해서 저장
		}
		else
		{
			LOG_WRITE("헬퍼오브젝트 찾기 실패!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
			return FALSE;	
		}
			
	}

	m_Smoke.Init(_Device, L"./image/explosion.dds", 10.0f, 500,15.0f); //연기 초기화 [2014.7.26 배성환]
	

	m_MDbk = m_MData; //데이터 백업
	return TRUE;
}

//-----------------------------------------------------------------------------
//  미사일 리셋함수 [2014.7.26 배성환]
//-----------------------------------------------------------------------------

void cMissile::Reset()
{
	cBullet::Reset(); 

	m_MData = m_MDbk;		//데이타 복구.


}


/****************************************************** End *****************************************************/