/************************************************************************/
/*					Resource.cpp			
*/
/************************************************************************/

#include "DXUT.h"
#include "SHR_Mesh.h"
#include "ResourceMgr.h"
#include "Resource.h"

LPDIRECT3DDEVICE9		IResource::m_pd3dDevice = nullptr ;
CResourceMgr*			CResourceMgr::m_pRscMgr = nullptr;//싱글톤	



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터 class SHR_VtxBuff 함수정의
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// 생성자
//-----------------------------------------------------------------------------
SHR_VtxBuff::SHR_VtxBuff()
{
	m_pVtxBuff = nullptr;
	eResourceType = eRT_VTXBUFF;
}

//-----------------------------------------------------------------------------
// 소멸자
//-----------------------------------------------------------------------------
SHR_VtxBuff::~SHR_VtxBuff()
{
	m_pVtxBuff->Release();
}


//-----------------------------------------------------------------------------
// 버텍스 버퍼 생성하기
// Arg    : D3DPOOL_DEFAULT= 0, D3DPOOL_MANAGED  = 1,	D3DPOOL_SYSTEMMEM = 2,	D3DPOOL_SCRATCH = 3  
// Return : 성공(S_OK) , 실패(S_FALSE)
//-----------------------------------------------------------------------------
int	SHR_VtxBuff::Create(_D3DPOOL eD3Dpool)
{

	m_PoolType = eD3Dpool;
	// 버텍스버퍼 생성
	if( FAILED( m_pd3dDevice->CreateVertexBuffer( m_BuffSize, 0, m_FVF, eD3Dpool, &m_pVtxBuff, NULL ) ) )
	{	SHUtil::MsgBox(" Fail : SHR_VtxBuff::Create(_D3DPOOL eD3Dpool) ,버텍스 버퍼 생성 실패"); write_log_file("버텍스 버퍼 생성 실패");
		assert(false);	
		return S_FALSE;
	}

	return S_OK;

}

//-----------------------------------------------------------------------------
// Return : 성공(S_OK) , 실패(S_FALSE)
// Desc   : 내부변수들의 값이 이미 복사되어있을때 사용되는 함수
//-----------------------------------------------------------------------------
int	 SHR_VtxBuff::Create()
{
	
	// 버텍스버퍼 생성
	if( FAILED( m_pd3dDevice->CreateVertexBuffer( m_BuffSize, 0, m_FVF, (D3DPOOL)m_PoolType, &m_pVtxBuff, NULL ) ) )
	{	SHUtil::MsgBox(" Fail : SHR_VtxBuff::Create() ,버텍스 버퍼 생성 실패"); write_log_file("버텍스 버퍼 생성 실패");
		assert(false);	
		return S_FALSE;
	}

	return S_OK;
}
//-------------------------------------------------------------------------
// Arg	  : void* _pVtxBuf
// Return : Succ(S_Ok)	, Fail ( S_Fail)
// Desc   : 버텍스 버퍼를 채운다.
//-------------------------------------------------------------------------
int		SHR_VtxBuff::WriteBuf( void*& _pVtxBuf)
{	
	// 버텍스버퍼 락
	if( FAILED( m_pVtxBuff->Lock( 0, m_BuffSize, ( void** )&m_pVtxBuffPoint, 0 ) ) )
	{	SHUtil::MsgBox(" Fail : SHR_VtxBuff::Create(), 버텍스 버퍼 락 실패 ");write_log_file("버텍스 버퍼 락 실패");
		assert(false);
		return S_FALSE;
	}

	//  버텍스 버퍼에 버텍스정보 복사
	memcpy( m_pVtxBuffPoint, _pVtxBuf, m_BuffSize );

	//  버텍스 버퍼 언락
	m_pVtxBuff->Unlock();

	return S_OK;

}
//-----------------------------------------------------------------------------
// Arg    : const WCHAR* _pName
// Desc   : 이름을 복사한다.
//-----------------------------------------------------------------------------
void	SHR_VtxBuff::SetName(const WCHAR* _pName)
{
	if(_pName == nullptr){SHUtil::MsgBox("SHR_VtxBuff::SetName(), _pName에 nullptr젅달 "); assert(false);}

	wcscpy_s(m_Name, _pName);
}



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터 class SHR_IdxBuff 함수정의
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// 생성자
//-----------------------------------------------------------------------------
SHR_IdxBuff::SHR_IdxBuff()
{
	m_pIdxBuff = nullptr;
	eResourceType = eRT_IDXBUFF;
}


//-----------------------------------------------------------------------------
// 소멸자
//-----------------------------------------------------------------------------
SHR_IdxBuff::~SHR_IdxBuff()
{
	m_pIdxBuff->Release();
}


//-----------------------------------------------------------------------------
// 인덱스 버퍼 생성하기
// Arg    : D3DPOOL_DEFAULT= 0, D3DPOOL_MANAGED  = 1,	D3DPOOL_SYSTEMMEM = 2,	D3DPOOL_SCRATCH = 3  
// Return : 성공(S_OK) , 실패(S_FALSE)
//-----------------------------------------------------------------------------
int		SHR_IdxBuff::Create(_D3DPOOL eD3Dpool)
{
	m_PoolType = eD3Dpool;
	// 1) 인덱스버퍼 생성
	if( FAILED( m_pd3dDevice->CreateIndexBuffer(m_BuffSize, D3DUSAGE_WRITEONLY,D3DFMT_INDEX16,	eD3Dpool, &m_pIdxBuff,NULL)))
	{	SHUtil::MsgBox(" Fail : SHR_IdxBuff::Create(_D3DPOOL eD3Dpool) ,인덱스 버퍼 생성 실패"); write_log_file("인덱스 버퍼 생성 실패");
		assert(false);	
		return S_FALSE;
	}
	

	return S_OK;
}


//-----------------------------------------------------------------------------
// Return : 성공(S_OK) , 실패(S_FALSE)
// Desc   : 내부변수들의 값이 이미 복사되어있을때 사용되는 함수
//-----------------------------------------------------------------------------
int		SHR_IdxBuff::Create()
{

	// 1) 인덱스버퍼 생성
	if( FAILED( m_pd3dDevice->CreateIndexBuffer(m_BuffSize, D3DUSAGE_WRITEONLY, D3DFMT_INDEX16,	(D3DPOOL)m_PoolType, &m_pIdxBuff,NULL)))
	{	SHUtil::MsgBox(" Fail : SHR_IdxBuff::Create() ,인덱스 버퍼 생성 실패"); write_log_file("인덱스 버퍼 생성 실패");
		assert(false);	
		return S_FALSE;
	}


	return S_OK;
}

//-----------------------------------------------------------------------------
// Arg    : const void*& _pIdxBuf
// Return : succ(S_Ok) , Fail(S_FALSE)
// Desc   : 인덱스 버퍼를 복사한다.
//-----------------------------------------------------------------------------
int		SHR_IdxBuff::WriteBuf( void*& _pIdxBuf)
{	
	// 2) 인덱스버퍼 락
	if( FAILED( m_pIdxBuff->Lock( 0, m_BuffSize, ( void** )&m_pIdxBuffPoint, 0 ) ) )
	{	SHUtil::MsgBox(" Fail : SHR_IdxBuff::Create(), 인덱스 버퍼 락 실패 ");write_log_file("인덱스 버퍼 락 실패");
		assert(false);
		return S_FALSE;
	}

	// 3) 인덱스 버퍼에 인덱스정보 복사
	memcpy( m_pIdxBuffPoint, _pIdxBuf, m_BuffSize  );

	// 4) 인덱스버퍼 언락
	m_pIdxBuff->Unlock();
	return S_OK;
}




//-----------------------------------------------------------------------------
// 인덱스 설정하기
//-----------------------------------------------------------------------------
void	SHR_IdxBuff::SetIndices()
{
	if(m_pIdxBuff != nullptr)
		m_pd3dDevice->SetIndices( m_pIdxBuff);


}

//-----------------------------------------------------------------------------
// Arg    : const WCHAR* _pName
// Desc   : 이름을 복사한다.
//-----------------------------------------------------------------------------
void	SHR_IdxBuff::SetName(const WCHAR* _pName)
{
	if(_pName == nullptr){SHUtil::MsgBox("SHR_VtxBuff::SetName(), _pName에 nullptr젅달 "); assert(false);}

	wcscpy_s(m_Name, _pName);
}



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터 class SHR_D3D9Texture 함수정의
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// 생성자
//-----------------------------------------------------------------------------
SHR_D3D9Texture::SHR_D3D9Texture()
{
	m_pTex = nullptr;
}

//-----------------------------------------------------------------------------
// 소멸자
//-----------------------------------------------------------------------------
SHR_D3D9Texture::~SHR_D3D9Texture()
{
	m_pTex->Release();
}

//-----------------------------------------------------------------------------
// Arg    :  WCHAR* _pName(고유 리소스 이름), WCHAR* _pPath /*= nullptr*/ (경로) 
// Return : success( S_OK), Fail( S_FAIL)
// Desc   : D3DXCreateTextureFromFile을 내부에서 실행하고 고유이름을 저장한다.
//-----------------------------------------------------------------------------
int		SHR_D3D9Texture::Create(const WCHAR* _pName,const WCHAR* _pPath /*= nullptr*/)
{
	if(_pName == nullptr)
	{
		SHUtil::MsgBox("Fail : SHR_D3D9Texture::Create() , _pName 이 Nullptr "); assert(false);
		return S_FALSE;
	}

	if(_pPath == nullptr)
	{
		SHUtil::MsgBox("Fail : SHR_D3D9Texture::Create() , _pPath 이 Nullptr "); assert(false);
		return S_FALSE;
	}

	//고유이름 복사
	wcscpy_s(m_Name , _pName);
	m_NameSize = sizeof(WCHAR)* wcslen(m_Name);
	wcscpy_s(m_Path ,_pPath);
	m_PathSize = sizeof(WCHAR)*wcslen(m_Path);

	// 텍스쳐생성
	D3DXCreateTextureFromFile(m_pd3dDevice, _pPath, &m_pTex);
	

	if(m_pTex == nullptr)
	{	

		SHUtil::MsgBoxW(L"%s , 텍스쳐 생성 실패!!!!!!!!!!!!!!!!!!!!" , _pName);
		return S_FALSE;		
	}
	
	return S_OK;
}



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터 class SHR_VtxShader 함수정의 
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// 생성자
//-----------------------------------------------------------------------------
SHR_VtxShader::SHR_VtxShader()
{
	m_pVtxShader = nullptr;
	eResourceType = eRT_VTXSHADER;
	
}

//-----------------------------------------------------------------------------
// 소멸자
//-----------------------------------------------------------------------------
SHR_VtxShader::~SHR_VtxShader()
{
	m_pVtxShader->Release();
}


//-------------------------------------------------------------------------
// Desc   : 버텍스 셰이더를 켠다
//-------------------------------------------------------------------------
void	SHR_VtxShader::TurnOn()
{
	m_pd3dDevice->SetVertexShader(m_pVtxShader); //셰이더 켜기
}


//-------------------------------------------------------------------------
// Desc   : 버텍스 셰이더를 켠다
//-------------------------------------------------------------------------
void	SHR_VtxShader::TurnOff()
{
	if(m_pVtxShader != nullptr)  
		m_pd3dDevice->SetVertexShader(NULL);//셰이더 해제
}



//-----------------------------------------------------------------------------
// Arg    : const WCHAR*
// Return : int
// Desc   : D3DXAssembleShaderFromFile을 호출하고 버텍스셰이더 객체를 만들어 준다.
//-----------------------------------------------------------------------------
int		SHR_VtxShader::Create(const WCHAR* _pName , const WCHAR* _pPath )
{
	if(_pPath == nullptr)
	{
		SHUtil::MsgBox("Fail : SHR_VtxShader::Create() ,_pPath 가 nullptr입니다.");assert(false);
		return S_FALSE;
	}
	if(_pName == nullptr)
	{
		SHUtil::MsgBox("Fail : SHR_VtxShader::Create() ,_pName 가 nullptr입니다.");assert(false);
		return S_FALSE;
	}

	// 경로 복사
	wcscpy_s(m_Path , _pPath);
	m_PathSize = sizeof(WCHAR)*wcslen(m_Path);
	// 고유이름 복사
	wcscpy_s(m_Name , _pName);
	m_NameSize = sizeof(WCHAR)*wcslen(m_Name);

	if(m_pd3dDevice == nullptr)
	{	SHUtil::MsgBox("Fail : SHR_VtxShader::Create(), m_pd3dDevice == nullptr "); 
		assert(m_pd3dDevice != nullptr); return S_FALSE;
	}
	

	ID3DXBuffer *pCode = NULL;
	ID3DXBuffer *pErr = NULL;


	if(D3DXAssembleShaderFromFile( m_Path, NULL, NULL, NULL, &pCode, &pErr ) !=D3D_OK )
	{
		TRACE("%s", pErr->GetBufferPointer());
		return S_FALSE;
	}

	m_pd3dDevice->CreateVertexShader( (DWORD*)pCode->GetBufferPointer(), &m_pVtxShader );

	if( pCode != NULL )
	{
		pCode->Release(); 
		pCode = NULL; 
	}

	if(m_pVtxShader == nullptr) return S_FALSE;

	return S_OK;

}


//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터 class SHR_PixShader 함수정의 
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// 생성자
//-----------------------------------------------------------------------------
SHR_PixShader::SHR_PixShader()
{
	m_pPixShader = nullptr;
	eResourceType = eRT_VTXSHADER;

}

//-----------------------------------------------------------------------------
// 소멸자
//-----------------------------------------------------------------------------
SHR_PixShader::~SHR_PixShader()
{
	if(m_pPixShader != nullptr)
	{
		m_pPixShader->Release();
		m_pPixShader = nullptr;
	}

}


//-------------------------------------------------------------------------
// Desc   : 픽셀 셰이더를 켠다
//-------------------------------------------------------------------------
void	SHR_PixShader::TurnOn()
{
	if(m_pPixShader != nullptr)  
		m_pd3dDevice->SetPixelShader(m_pPixShader); //셰이더 켜기
}


//-------------------------------------------------------------------------
// Desc   :픽셀 셰이더를 켠다
//-------------------------------------------------------------------------
void	SHR_PixShader::TurnOff()
{
	if(m_pPixShader != nullptr)  
		m_pd3dDevice->SetPixelShader(NULL);//셰이더 해제
}



//-----------------------------------------------------------------------------
// Arg    : const WCHAR*
// Return : int
// Desc   : D3DXAssembleShaderFromFile을 호출하고 버텍스셰이더 객체를 만들어 준다.
//-----------------------------------------------------------------------------
int		SHR_PixShader::Create(const WCHAR* _pName , const WCHAR* _pPath )
{
	if(_pPath == nullptr)
	{
		SHUtil::MsgBox("Fail : SHR_VtxShader::Create() ,_pPath 가 nullptr입니다.");assert(false);
		return S_FALSE;
	}
	if(_pName == nullptr)
	{
		SHUtil::MsgBox("Fail : SHR_VtxShader::Create() ,_pName 가 nullptr입니다.");assert(false);
		return S_FALSE;
	}

	// 경로 복사
	wcscpy_s(m_Path , _pPath);
	m_PathSize = sizeof(WCHAR)*wcslen(m_Path);
	// 고유이름 복사
	wcscpy_s(m_Name , _pName);
	m_NameSize = sizeof(WCHAR)*wcslen(m_Name);

	if(m_pd3dDevice == nullptr)
	{	SHUtil::MsgBox("Fail : SHR_VtxShader::Create(), m_pd3dDevice == nullptr "); 
	assert(m_pd3dDevice != nullptr); return S_FALSE;
	}


	ID3DXBuffer *pCode = NULL;
	ID3DXBuffer *pErr = NULL;


	//////////////////////////////////////////////////////////////////////////
	// for  pixel shader

	if(D3DXAssembleShaderFromFile( _pPath, NULL, NULL, NULL, &pCode, &pErr )  !=D3D_OK)
	{
		TRACE("%s", pErr->GetBufferPointer());
		return S_FALSE;

	}

	if(pErr != nullptr)
	{
		pErr->Release();
		pErr = nullptr;
	}

	SHGlobal_GetD3DDevice->CreatePixelShader( (DWORD*)pCode->GetBufferPointer(), &m_pPixShader);	

	SAFE_RELEASE(pCode)

	if(m_pPixShader == nullptr) return S_FALSE;

	return S_OK;

}




/********************************************************* end *************************************************************/
                                                                   
