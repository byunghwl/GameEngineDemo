/***********************************************************************
                         Collider.cpp
					 
************************************************************************/


#include "DXUT.h"
#include "Collider.h"


CCollideMgr*	CCollideMgr::m_pCollMgr = nullptr;//싱글톤	

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터 class CCollideMgr  함수정의
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////


//-----------------------------------------------------------------------------
// 싱글톤 CResourceMgr 인스턴스 반환
//-----------------------------------------------------------------------------
CCollideMgr*	CCollideMgr::getInstance()
{
	if(m_pCollMgr == nullptr) m_pCollMgr = new CCollideMgr();

	return m_pCollMgr;
}

CCollideMgr::CCollideMgr()
{

}

CCollideMgr::~CCollideMgr()
{

}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터  class   ICollidable함수정의
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------
// 생성자
//-----------------------------------------------------------------------------
ICollidable::ICollidable()
{
	m_pCollidObj = nullptr;
}

//-----------------------------------------------------------------------------
// 소멸자
//-----------------------------------------------------------------------------
ICollidable::~ICollidable()
{
	if(m_pCollidObj !=nullptr)
		SAFE_DELETE(m_pCollidObj)

}

//-----------------------------------------------------------------------------
// Arg    : ICollidable* pIColliObj
// Return : bool  충돌성공시 true
// Desc   : pIColliObj 의 타입을 검사해 해당하는 충돌함수를 호출하고 반환정보를 반환한다.
//-----------------------------------------------------------------------------
bool	ICollidable::Collide_Check(ICollidable* pIColliObj, SH_CollideInfo* _Collide_Info)
{
	SH_CollideInfo ColliInfo;

	if(pIColliObj->m_pCollidObj->m_ColliType == eColli_Type_Sphere)
	{
		return m_pCollidObj->Colli_Check(pIColliObj->m_pCollidObj);
	}



	return false;
}



///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// 
// 여기서부터 class CBoundSphere  
// 
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// 생성자  
// 반드시 생성자에서 m_ColliType 을 지정해줘야함 [2014.11.11 ]
//-------------------------------------------------------------------------
CBoundSphere::CBoundSphere()
{
	m_ColliType = eColli_Type_Sphere;
}

//-------------------------------------------------------------------------
// 소멸자
//-------------------------------------------------------------------------
CBoundSphere::~CBoundSphere()
{

}

//-------------------------------------------------------------------------
// 가상함수 재정의 
// from class ICollider 
// Arg    : <IN>ICollider* _pCollider , <OUT>SH_CollideInfo* _Collide_Info = nullptr (충돌정보를 저장한다 )
// return : bool
// Desc   : 인자값의 타입값으로 어떤 충돌함수를 호출해야할지 결정하고 충돌체크를 수행 
//-------------------------------------------------------------------------
bool	CBoundSphere::Colli_Check(ICollider* _pCollider, SH_CollideInfo* _Collide_Info/* = nullptr*/)
{
	if(_pCollider->m_ColliType == eColli_Type_Sphere)
	{
		CBoundSphere* pSp2 = (CBoundSphere*)_pCollider;
		return CollCheck_Sphere_vs_Shpere( m_Center , m_Radius, pSp2->m_Center, pSp2->m_Radius);

	}

	assert(false);
	return false;
}



///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
// 
// 여기서부터 class CBoundBox_AABB 
// 
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
// 생성자  
// 반드시 생성자에서 m_ColliType 을 지정해줘야함
//-------------------------------------------------------------------------
CBoundBox_AABB::CBoundBox_AABB()
{
	m_ColliType = eColli_Type_Box_AABB;
}

//-------------------------------------------------------------------------
// 소멸자
//-------------------------------------------------------------------------
CBoundBox_AABB::~CBoundBox_AABB()
{

}

//-------------------------------------------------------------------------
// 가상함수 재정의 
// from class ICollider, [OUT] SH_CollideInfo* _Collide_Info = nullptr
// Arg    : ICollider* _pCollider
// return : bool
// Desc   : 인자값의 타입값으로 어떤 충돌함수를 호출해야할지 결정하고 충돌체크를 수행 [2014.11.11 ]
//-------------------------------------------------------------------------
bool	CBoundBox_AABB::Colli_Check(ICollider* _pCollider , SH_CollideInfo* _Collide_Info /*= nullptr*/)
{
	if(_pCollider->m_ColliType == eColli_Type_Sphere)
	{
		CBoundSphere* pSp1 = (CBoundSphere*)_pCollider;

		//////////////////////////////////////////////////////////////////////////
		// 충돌체크  [2014.11.25 ]
		{
			D3DXVECTOR3		VectoCenter ; // 원의 원점에서 박스의 원점으로 향하는 벡터
			D3DXVECTOR3		MovedPoint ; // 원의 원점에서 박스중점방향으로 반지름길이반큼 이동한 점

			VectoCenter = m_Center - pSp1->GetCenter();
			D3DXVec3Normalize(&VectoCenter, &VectoCenter);

			MovedPoint = pSp1->GetCenter() + (VectoCenter * pSp1->GetRadius());
			// x축검사
			if( (MovedPoint.x < m_Max.x )	&& 	(MovedPoint.x > m_Min.x ) 	)
			{	// y축검사
				if( (MovedPoint.y < m_Max.y )	&& 	(MovedPoint.y > m_Min.y )  )
				{    // z축검사
					if( (MovedPoint.z < m_Max.z )	&& 	(MovedPoint.z > m_Min.z )  )
					{
						if(_Collide_Info != nullptr)
						{
							float DistX = m_Max.x - MovedPoint.x  ;//충돌지점 포인트.x 와  max_X 또는 min_X와의 거리중 더 짧은 거리
							DistX = (DistX< (MovedPoint.x - m_Min.x))?DistX:( MovedPoint.x - m_Min.x );

							float DistZ = m_Max.z - MovedPoint.z  ;//충돌지점 포인트.z 와  max_Z 또는 min_Z와의 거리중 더 짧은 거리
							DistZ = (DistZ< (MovedPoint.z - m_Min.z))?DistZ:( MovedPoint.z - m_Min.z );

							if(DistX < DistZ)
							{	_Collide_Info->X = true; _Collide_Info->Z = false;	}
							else
							{  	_Collide_Info->Z = true; _Collide_Info->X = false;	}
						}
						
							

						return true;
					}
				}
			}

			return false;
		}// 충돌체크 끝 [2014.11.25 ]


	//	return CollCheck_Sphere_vs_BoxAABB( pSp1->GetCenter() , pSp1->GetRadius(), m_Center, m_Max, m_Min);
	}

	

	assert(false);
	return false;
}