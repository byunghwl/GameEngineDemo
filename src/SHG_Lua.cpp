/************************************************************************/
/*								[2014.10.17 ]
						루아 를 위한 cpp
*/
/************************************************************************/
#include "DXUT.h"
#include "SHG_Lua.h"





//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//
// 여기서부터 SH_Lua 함수정의
//
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////


//-----------------------------------------------------------------------------
// Desc   : 루아 초기화 해주는 생성자  [2014.10.18 ]
// Arg    : _pPath 루아스크립트 파일 경로
//-----------------------------------------------------------------------------
SH_Lua::SH_Lua(const CHAR* _pPath)
{
	// 루아 환경을 초기화 합니다.
	m_pLuaState = luaL_newstate();			//신형 5.1.x 방법.★
	luaL_openlibs(m_pLuaState);
	
	if(luaL_dofile(m_pLuaState, _pPath) )
	{
		SHUtil::MsgBox("SH_Lua::SH_Lua() , luaL_dofile 에러!!!!!!!!!!");
		assert(false);
	}

}

//-----------------------------------------------------------------------------
// 소멸자
//-----------------------------------------------------------------------------
SH_Lua::~SH_Lua()
{
	Release();
}


//-----------------------------------------------------------------------------
// Desc   : 루아를 초기화 했다면  반드시 마지막에 이함수로 해제해줘야한다. 
//-----------------------------------------------------------------------------
void SH_Lua::Release()
{
	// 종료시 루아 환경 삭제.
	lua_close(m_pLuaState);

}


//-----------------------------------------------------------------------------
// Arg    : <In> const char* _ValName  = 찾고싶은  변수이름
//			<Out>int &_val = 찾은 변수값을 저장할곳 (외부변수)
// Desc   : 문자열 이름으로  int 형 변수를 찾아준다.
//-----------------------------------------------------------------------------
void	 SH_Lua::GetGlobal_int(const char* _ValName, int &_val)
{
	lua_getglobal(m_pLuaState , _ValName);

	if(!lua_isnumber(m_pLuaState, -1)) // 첫번째 인덱스의 값이 숫자가 아니라면
	{
		SHUtil::MsgBox("SH_Lua::GetGlobal_int()  ,  해당하는 값이 숫자가 아님");
		assert(false);
	}
	
	_val = lua_tointeger(m_pLuaState, -1);

	
	lua_pop(m_pLuaState, 1);
}

//-----------------------------------------------------------------------------
// Arg    : <In> const char* _ValName  = 찾고싶은  변수이름
//			<Out>int &_val = 찾은 변수값을 저장할곳 (외부변수)
// Desc   : 문자열 이름으로  float 형 변수를 찾아준다.   [2014.11.14 ]
//-----------------------------------------------------------------------------
void	 SH_Lua::GetGlobal_float(const char* _ValName, float &_val)
{
	lua_getglobal(m_pLuaState , _ValName);

	if(!lua_isnumber(m_pLuaState, -1)) // 첫번째 인덱스의 값이 숫자가 아니라면
	{
		SHUtil::MsgBox("SH_Lua::GetGlobal_float()  ,  해당하는 값이 숫자가 아님");
		assert(false);
	}

	_val = (float)lua_tonumber(m_pLuaState, -1);


	lua_pop(m_pLuaState, 1);
}


//-------------------------------------------------------------------------
// 이름에 해당하는 테이블을 루아스택 맨위에 올려놓는다.
//-------------------------------------------------------------------------
void	SH_Lua::PushTable(const char* _Name)
{
	lua_getglobal(m_pLuaState, _Name);
	if(!lua_istable(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::PushTable(),%s 이  테이블이 아닙니다.", _Name);
		assert(false);
	}
}


//-------------------------------------------------------------------------
// 루아스택 맨위에 있는 테이블을 pop해준다.
//-------------------------------------------------------------------------
void		SH_Lua::PopTable()
{
	if(!lua_istable(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::PopTable(), 스택 가장 위의 값이 테이블이 아닙니다.");
		assert(false);
	}

	lua_pop(m_pLuaState, 1);
}

//-----------------------------------------------------------------------------
// Arg    : const char* _keyName , bool& _val
// Return : 
// Desc   : 테이블에서 bool 변수를 가지고 온다.[2014.11.25 ]
//-----------------------------------------------------------------------------
void		SH_Lua::Getfield_bool(const char* _keyName, bool& _val)
{
	if(!lua_istable(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::Getfield_int(), 스택 가장 위의 값이 테이블이 아닙니다.");
		assert(false);
	}

	lua_getfield(m_pLuaState, -1, _keyName);

	if(!lua_isboolean(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::Getfield_int(), 키값 %s에 해당하는 boolean 이 아니다!!. ", _keyName);
		assert(false);
	}

	_val = (bool)lua_toboolean(m_pLuaState, -1);
	lua_pop(m_pLuaState, 1);
}

//-------------------------------------------------------------------------
// arg  : <In> const char* _keyName, <Out> int &_val(반환값)
// Desc :  루아스텍 맨위에 테이블이 있다고 가정하고 _keyName에 해당하는 값을 가져온다.
//		   가져온 값이 int 가 아닐경우 에러메세지와 프로그램 종료
//-------------------------------------------------------------------------
void	SH_Lua::Getfield_int(const char* _keyName, int &_val)
{
	if(!lua_istable(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::Getfield_int(), 스택 가장 위의 값이 테이블이 아닙니다.");
		assert(false);
	}

	lua_getfield(m_pLuaState, -1, _keyName);

	if(!lua_isnumber(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::Getfield_int(), 키값 %s에 해당하는 값은 숫자가 아닙니다. ", _keyName);
		assert(false);
	}

	_val = (int)lua_tonumber(m_pLuaState, -1);
	lua_pop(m_pLuaState, 1);

}

//-------------------------------------------------------------------------
// arg  : <In> const char* _keyName, <Out> float &_val(반환값)
// Desc :  루아스텍 맨위에 테이블이 있다고 가정하고 _keyName에 해당하는 값을 가져온다.
//		   가져온 값이 int 가 아닐경우 에러메세지와 프로그램 종료
//-------------------------------------------------------------------------
void	SH_Lua::Getfield_float(const char* _keyName, float& _val)
{
	if(!lua_istable(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::Getfield_int(), 스택 가장 위의 값이 테이블이 아닙니다.");
		assert(false);
	}

	lua_getfield(m_pLuaState, -1, _keyName);

	if(!lua_isnumber(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::Getfield_int(), 키값 %s에 해당하는 값은 숫자가 아닙니다. ", _keyName);
		assert(false);
	}

	_val = lua_tonumber(m_pLuaState, -1);
	lua_pop(m_pLuaState, 1);

}

//-------------------------------------------------------------------------
// arg  : <In> const char* _keyName, <Out> int &_val(반환값)
// Desc :  루아스텍 맨위에 테이블이 있다고 가정하고 _keyName에 해당하는 값을 가져온다.
//		   가져온 값이 문자열이 아닐경우 에러메세지와 프로그램 종료
//-------------------------------------------------------------------------
void	SH_Lua::Getfield_String(const char* _keyName, char* _String)
{

	if(!lua_istable(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::Getfield_String(), 스택 가장 위의 값이 테이블이 아닙니다.");
		assert(false);
	}

	lua_getfield(m_pLuaState, -1, _keyName);
	if(!lua_isstring(m_pLuaState, -1))
	{
		SHUtil::MsgBox("SH_Lua::Getfield_int(), 키값 %s에 해당하는 값은 문자열이 아닙니다.",_keyName);
		assert(false);
	}

	const char* ptempStr;
	size_t strlen;// 문자열의 길이를 저장할 변수
	ptempStr = lua_tolstring(m_pLuaState, -1, &strlen);
	strcpy_s(_String, strlen+1 , ptempStr);

	lua_pop(m_pLuaState, 1);
}

